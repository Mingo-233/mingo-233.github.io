var P=Object.defineProperty;var D=(p,e,t)=>e in p?P(p,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[e]=t;var l=(p,e,t)=>(D(p,typeof e!="symbol"?e+"":e,t),t);import{u as C,v as A,l as I,w as L,d as E,B as R,H as x,S as U,C as N,R as O,a as S,g as B,x as G,k as M,A as z,P as F}from"./index-31c0b642.js";import{l as k}from"./LoadingCreator-28297c1b.js";import{t as v}from"./tweakpane-9ec2a9db.js";import{d as H,h as j,l as W,c as q,o as V,a as J}from"./index-42613d43.js";import"./vendor-c27b6911.js";const T=new WeakMap;class Y extends C{constructor(e){super(e),this.decoderPath="",this.decoderConfig={},this.decoderBinary=null,this.decoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.defaultAttributeIDs={position:"POSITION",normal:"NORMAL",color:"COLOR",uv:"TEX_COORD"},this.defaultAttributeTypes={position:"Float32Array",normal:"Float32Array",color:"Float32Array",uv:"Float32Array"}}setDecoderPath(e){return this.decoderPath=e,this}setDecoderConfig(e){return this.decoderConfig=e,this}setWorkerLimit(e){return this.workerLimit=e,this}load(e,t,r,o){const i=new A(this.manager);i.setPath(this.path),i.setResponseType("arraybuffer"),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,s=>{const n={attributeIDs:this.defaultAttributeIDs,attributeTypes:this.defaultAttributeTypes,useUniqueIDs:!1};this.decodeGeometry(s,n).then(t).catch(o)},r,o)}decodeDracoFile(e,t,r,o){const i={attributeIDs:r||this.defaultAttributeIDs,attributeTypes:o||this.defaultAttributeTypes,useUniqueIDs:!!r};this.decodeGeometry(e,i).then(t)}decodeGeometry(e,t){for(const a in t.attributeTypes){const m=t.attributeTypes[a];m.BYTES_PER_ELEMENT!==void 0&&(t.attributeTypes[a]=m.name)}const r=JSON.stringify(t);if(T.has(e)){const a=T.get(e);if(a.key===r)return a.promise;if(e.byteLength===0)throw new Error("THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.")}let o;const i=this.workerNextTaskID++,s=e.byteLength,n=this._getWorker(i,s).then(a=>(o=a,new Promise((m,d)=>{o._callbacks[i]={resolve:m,reject:d},o.postMessage({type:"decode",id:i,taskConfig:t,buffer:e},[e])}))).then(a=>this._createGeometry(a.geometry));return n.catch(()=>!0).then(()=>{o&&i&&this._releaseTask(o,i)}),T.set(e,{key:r,promise:n}),n}_createGeometry(e){const t=new I;e.index&&t.setIndex(new L(e.index.array,1));for(let r=0;r<e.attributes.length;r++){const o=e.attributes[r],i=o.name,s=o.array,n=o.itemSize;t.setAttribute(i,new L(s,n))}return t}_loadLibrary(e,t){const r=new A(this.manager);return r.setPath(this.decoderPath),r.setResponseType(t),r.setWithCredentials(this.withCredentials),new Promise((o,i)=>{r.load(e,o,void 0,i)})}preload(){return this._initDecoder(),this}_initDecoder(){if(this.decoderPending)return this.decoderPending;const e=typeof WebAssembly!="object"||this.decoderConfig.type==="js",t=[];return e?t.push(this._loadLibrary("draco_decoder.js","text")):(t.push(this._loadLibrary("draco_wasm_wrapper.js","text")),t.push(this._loadLibrary("draco_decoder.wasm","arraybuffer"))),this.decoderPending=Promise.all(t).then(r=>{const o=r[0];e||(this.decoderConfig.wasmBinary=r[1]);const i=K.toString(),s=["/* draco decoder */",o,"","/* worker */",i.substring(i.indexOf("{")+1,i.lastIndexOf("}"))].join(`
`);this.workerSourceURL=URL.createObjectURL(new Blob([s]))}),this.decoderPending}_getWorker(e,t){return this._initDecoder().then(()=>{if(this.workerPool.length<this.workerLimit){const o=new Worker(this.workerSourceURL);o._callbacks={},o._taskCosts={},o._taskLoad=0,o.postMessage({type:"init",decoderConfig:this.decoderConfig}),o.onmessage=function(i){const s=i.data;switch(s.type){case"decode":o._callbacks[s.id].resolve(s);break;case"error":o._callbacks[s.id].reject(s);break;default:console.error('THREE.DRACOLoader: Unexpected message, "'+s.type+'"')}},this.workerPool.push(o)}else this.workerPool.sort(function(o,i){return o._taskLoad>i._taskLoad?-1:1});const r=this.workerPool[this.workerPool.length-1];return r._taskCosts[e]=t,r._taskLoad+=t,r})}_releaseTask(e,t){e._taskLoad-=e._taskCosts[t],delete e._callbacks[t],delete e._taskCosts[t]}debug(){console.log("Task load: ",this.workerPool.map(e=>e._taskLoad))}dispose(){for(let e=0;e<this.workerPool.length;++e)this.workerPool[e].terminate();return this.workerPool.length=0,this}}function K(){let p,e;onmessage=function(s){const n=s.data;switch(n.type){case"init":p=n.decoderConfig,e=new Promise(function(d){p.onModuleLoaded=function(h){d({draco:h})},DracoDecoderModule(p)});break;case"decode":const a=n.buffer,m=n.taskConfig;e.then(d=>{const h=d.draco,c=new h.Decoder,f=new h.DecoderBuffer;f.Init(new Int8Array(a),a.byteLength);try{const u=t(h,c,f,m),y=u.attributes.map(b=>b.array.buffer);u.index&&y.push(u.index.array.buffer),self.postMessage({type:"decode",id:n.id,geometry:u},y)}catch(u){console.error(u),self.postMessage({type:"error",id:n.id,error:u.message})}finally{h.destroy(f),h.destroy(c)}});break}};function t(s,n,a,m){const d=m.attributeIDs,h=m.attributeTypes;let c,f;const u=n.GetEncodedGeometryType(a);if(u===s.TRIANGULAR_MESH)c=new s.Mesh,f=n.DecodeBufferToMesh(a,c);else if(u===s.POINT_CLOUD)c=new s.PointCloud,f=n.DecodeBufferToPointCloud(a,c);else throw new Error("THREE.DRACOLoader: Unexpected geometry type.");if(!f.ok()||c.ptr===0)throw new Error("THREE.DRACOLoader: Decoding failed: "+f.error_msg());const y={index:null,attributes:[]};for(const b in d){const w=self[h[b]];let g,_;if(m.useUniqueIDs)_=d[b],g=n.GetAttributeByUniqueId(c,_);else{if(_=n.GetAttributeId(c,s[d[b]]),_===-1)continue;g=n.GetAttribute(c,_)}y.attributes.push(o(s,n,c,b,w,g))}return u===s.TRIANGULAR_MESH&&(y.index=r(s,n,c)),s.destroy(c),y}function r(s,n,a){const d=a.num_faces()*3,h=d*4,c=s._malloc(h);n.GetTrianglesUInt32Array(a,h,c);const f=new Uint32Array(s.HEAPF32.buffer,c,d).slice();return s._free(c),{array:f,itemSize:1}}function o(s,n,a,m,d,h){const c=h.num_components(),u=a.num_points()*c,y=u*d.BYTES_PER_ELEMENT,b=i(s,d),w=s._malloc(y);n.GetAttributeDataArrayForAllPoints(a,h,b,y,w);const g=new d(s.HEAPF32.buffer,w,u).slice();return s._free(w),{name:m,array:g,itemSize:c}}function i(s,n){switch(n){case Float32Array:return s.DT_FLOAT32;case Int8Array:return s.DT_INT8;case Int16Array:return s.DT_INT16;case Int32Array:return s.DT_INT32;case Uint8Array:return s.DT_UINT8;case Uint16Array:return s.DT_UINT16;case Uint32Array:return s.DT_UINT32}}}class X{constructor(e){l(this,"basic");l(this,"scene");l(this,"camera");l(this,"renderer");l(this,"controls");l(this,"sizes");l(this,"useShader",!0);l(this,"clock");l(this,"helper");l(this,"debug");l(this,"resources");l(this,"emitter");l(this,"option");l(this,"material");this.option=e,this.emitter=new E.EventEmitter,this.basic=new R(e.dom),this.scene=this.basic.scene,this.renderer=this.basic.renderer,this.controls=this.basic.controls,this.camera=this.basic.camera,this.helper=new x(this.scene),this.sizes=new U(this),this.clock=new N,this.debug=new v.Pane({title:"🎉 mingo 🎉",expanded:!0}),this.initialize(),this.resources=new O({},()=>{console.log("资源加载完成",this.resources),this.createBox(),this.createLight(),this.render()})}initialize(){this.scene.background=new S("#000"),this.camera.position.set(5,5,5),this.emitter.on("resize",()=>{this.renderer.setSize(Number(this.sizes.viewport.width),Number(this.sizes.viewport.height)),this.camera.aspect=Number(this.sizes.viewport.width)/Number(this.sizes.viewport.height),this.camera.updateProjectionMatrix()})}createBox(){new B(1,1,1);const e=new G,t=new Y;t.setDecoderPath("/draco/"),e.setDRACOLoader(t),console.log(e),k.show(),e.load("./lib/Demo.glb",r=>{k.hide(),console.log(r),this.scene.add(r.scene)},function(r){console.log(r.loaded/r.total*100+"% loaded");const o=Math.floor(r.loaded/r.total*100);k.update(o)},function(r){console.error("An error happened",r),k.hide()}),this.controls.target=new M(0,0,0),this.controls.update()}createLight(){const e=new z(4210752,1);this.scene.add(e);const t=new F(16711680,1,0);t.position.set(500,800,150),this.scene.add(t)}destory(){this.debug.dispose()}render(){requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera),this.controls&&this.controls.update()}}const Q=J("div",{id:"threejs-canvas"},null,-1),Z=[Q],ne=H({__name:"index",setup(p){let e;return j(()=>{const t=document.querySelector("#threejs-canvas");e=new X({dom:t})}),W(()=>{e.destory()}),(t,r)=>(V(),q("div",null,Z))}});export{ne as default};
